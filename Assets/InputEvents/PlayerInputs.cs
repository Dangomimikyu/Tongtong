//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/InputEvents/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""005cd5a8-08b6-4467-aea8-e3ef6ec5c8be"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Expedition"",
            ""id"": ""81e51138-ac36-477f-9af1-b4cc078dd521"",
            ""actions"": [
                {
                    ""name"": ""Drum"",
                    ""type"": ""Button"",
                    ""id"": ""707a2e4d-3ad9-4eb5-b415-eabc9581539b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fa3a113-4de2-4e40-b12e-e06804e0ed67"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""Drum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8b2beb1-5f8f-476f-a24d-0f4551107322"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""Drum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b95dd495-846d-4a6c-94ac-d3b8a9200735"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""Drum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ecb1d4d-2eb4-4480-bae9-ae4e18f6c0d6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": """",
                    ""action"": ""Drum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        // Expedition
        m_Expedition = asset.FindActionMap("Expedition", throwIfNotFound: true);
        m_Expedition_Drum = m_Expedition.FindAction("Drum", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base
    private readonly InputActionMap m_Base;
    private IBaseActions m_BaseActionsCallbackInterface;
    public struct BaseActions
    {
        private @PlayerInputs m_Wrapper;
        public BaseActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        public void SetCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_BaseActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public BaseActions @Base => new BaseActions(this);

    // Expedition
    private readonly InputActionMap m_Expedition;
    private IExpeditionActions m_ExpeditionActionsCallbackInterface;
    private readonly InputAction m_Expedition_Drum;
    public struct ExpeditionActions
    {
        private @PlayerInputs m_Wrapper;
        public ExpeditionActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drum => m_Wrapper.m_Expedition_Drum;
        public InputActionMap Get() { return m_Wrapper.m_Expedition; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExpeditionActions set) { return set.Get(); }
        public void SetCallbacks(IExpeditionActions instance)
        {
            if (m_Wrapper.m_ExpeditionActionsCallbackInterface != null)
            {
                @Drum.started -= m_Wrapper.m_ExpeditionActionsCallbackInterface.OnDrum;
                @Drum.performed -= m_Wrapper.m_ExpeditionActionsCallbackInterface.OnDrum;
                @Drum.canceled -= m_Wrapper.m_ExpeditionActionsCallbackInterface.OnDrum;
            }
            m_Wrapper.m_ExpeditionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Drum.started += instance.OnDrum;
                @Drum.performed += instance.OnDrum;
                @Drum.canceled += instance.OnDrum;
            }
        }
    }
    public ExpeditionActions @Expedition => new ExpeditionActions(this);
    public interface IBaseActions
    {
    }
    public interface IExpeditionActions
    {
        void OnDrum(InputAction.CallbackContext context);
    }
}
